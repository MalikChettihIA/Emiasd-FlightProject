name: Start Application on Push

on:
  push:
    branches: [ feature/ci-cd-integration ]

jobs:
  start-app:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up environment
      run: |
        echo "📦 Setting up JDK 17..."
        apt-get update
        apt-get install -y sbt
        
        echo "🐳 Enabling Docker experimental features..."
        mkdir -p ~/.docker
        echo '{"experimental": "enabled"}' | tee ~/.docker/config.json

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache sbt dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.sbt
          ~/.ivy2/cache
          ~/.coursier/cache
        key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt', '**/plugins.sbt') }}
        restore-keys: |
          ${{ runner.os }}-sbt-

    - name: Build Docker images with docker compose
      run: |
        cd docker
        echo "🔨 Building Docker images from docker-compose.yml..."
        docker compose build --progress=plain 2>&1 | tee build.log
        
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
          echo "❌ Build failed"
          exit 1
        fi
        echo "✅ Docker images built successfully"

    - name: Start Docker services with docker compose
      run: |
        cd docker
        echo "🚀 Starting Docker services from docker-compose.yml (with retry)..."
        MAX_RETRIES=3
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          echo "Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES..."
          if docker compose -f docker-compose.yml up -d; then
            echo "✅ Services started successfully"
            break
          else
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "⚠️  Attempt $((RETRY_COUNT)) failed, retrying in 10s..."
              docker compose down -v 2>/dev/null || true
              sleep 10
            fi
          fi
        done
        
        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
          echo "❌ Failed to start services after $MAX_RETRIES attempts"
          exit 1
        fi

    - name: Verify services health
      run: |
        echo "⏳ Waiting 15s for services to stabilize..."
        sleep 15
        
        echo "📊 Docker Compose services status:"
        cd docker
        docker compose ps
        
        echo ""
        echo "📋 All running containers:"
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

    - name: Debug services on failure
      if: failure()
      run: |
        echo "📋 Build logs (if available):"
        [ -f docker/build.log ] && tail -50 docker/build.log || echo "No build log found"
        
        echo ""
        echo "📋 Docker Compose configuration:"
        cd docker && docker compose config 2>&1 | head -50
        
        echo ""
        echo "📋 Container logs for failed services:"
        for container in $(docker ps -a --format "{{.Names}}" 2>/dev/null); do
          echo ""
          echo "=== Logs for $container ==="
          docker logs --tail 30 "$container" 2>&1 || true
        done

    - name: Cleanup Docker resources
      if: always()
      run: |
        cd docker
        echo "🧹 Stopping and removing Docker Compose services..."
        docker compose down -v --remove-orphans 2>/dev/null || true
        
        echo ""
        echo "🧹 Pruning unused Docker resources..."
        docker system prune -f --volumes 2>/dev/null || true
        echo "✅ Cleanup complete"
