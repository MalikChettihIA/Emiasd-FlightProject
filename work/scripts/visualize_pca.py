#!/usr/bin/env python3
"""
Visualization script for PCA Analysis

This script loads PCA variance and projection data generated by the Scala PCA pipeline
and creates comprehensive visualizations.

Usage:
    python visualize_pca.py <pca_data_directory>

Example:
    python visualize_pca.py /output/metrics/pca_analysis
"""

import sys
import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from pathlib import Path

# Set style
sns.set_style("whitegrid")
plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 10

def load_pca_data(data_dir):
    """Load PCA variance and projection CSV files"""
    data_dir = Path(data_dir)

    pca_data = {}

    # Load variance analysis
    variance_file = data_dir / "pca_variance.csv"
    if variance_file.exists():
        pca_data['variance'] = pd.read_csv(variance_file)
        print(f"✓ Loaded: {variance_file}")

    # Load PCA projections (biplot data)
    projection_file = data_dir / "pca_projections.csv"
    if projection_file.exists():
        pca_data['projections'] = pd.read_csv(projection_file)
        print(f"✓ Loaded: {projection_file}")

    # Load PCA loadings (feature contributions)
    loadings_file = data_dir / "pca_loadings.csv"
    if loadings_file.exists():
        pca_data['loadings'] = pd.read_csv(loadings_file)
        print(f"✓ Loaded: {loadings_file}")

    # Load feature names (optional)
    feature_names_file = data_dir / "feature_names.csv"
    if feature_names_file.exists():
        pca_data['feature_names'] = pd.read_csv(feature_names_file)
        print(f"✓ Loaded: {feature_names_file}")

    return pca_data

def plot_scree_plot(pca_data, output_dir):
    """Plot scree plot showing variance explained by each component"""
    if 'variance' not in pca_data:
        print("⚠ No variance data found")
        return

    df = pca_data['variance']

    fig, ax = plt.subplots(figsize=(12, 6))

    # Plot individual variance
    ax.bar(df['component'], df['explained_variance'],
           alpha=0.7, color='#3498db', label='Individual Variance')

    # Add line for each bar
    ax.plot(df['component'], df['explained_variance'],
            'o-', color='#2c3e50', linewidth=2, markersize=6)

    ax.set_xlabel('Principal Component', fontweight='bold', fontsize=12)
    ax.set_ylabel('Explained Variance Ratio', fontweight='bold', fontsize=12)
    ax.set_title('Scree Plot - Variance Explained by Each Component',
                 fontsize=14, fontweight='bold')
    ax.legend(fontsize=11)
    ax.grid(alpha=0.3)

    # Limit x-axis ticks if too many components
    if len(df) > 20:
        tick_positions = range(1, len(df) + 1, max(1, len(df) // 20))
        ax.set_xticks(tick_positions)

    plt.tight_layout()
    output_file = output_dir / "scree_plot.png"
    plt.savefig(output_file, dpi=300, bbox_inches='tight')
    print(f"✓ Saved: {output_file}")
    plt.close()

def plot_cumulative_variance(pca_data, output_dir):
    """Plot cumulative variance explained"""
    if 'variance' not in pca_data:
        print("⚠ No variance data found")
        return

    df = pca_data['variance']

    fig, ax = plt.subplots(figsize=(12, 6))

    # Plot cumulative variance
    ax.plot(df['component'], df['cumulative_variance'],
            'o-', color='#2ecc71', linewidth=3, markersize=8,
            label='Cumulative Variance')

    # Add threshold lines
    thresholds = [0.80, 0.90, 0.95, 0.99]
    colors = ['#e74c3c', '#e67e22', '#f39c12', '#9b59b6']

    for threshold, color in zip(thresholds, colors):
        ax.axhline(y=threshold, color=color, linestyle='--',
                   linewidth=1.5, alpha=0.7,
                   label=f'{int(threshold * 100)}% threshold')

        # Find component that reaches threshold
        components_at_threshold = df[df['cumulative_variance'] >= threshold]
        if not components_at_threshold.empty:
            first_component = components_at_threshold.iloc[0]['component']
            ax.axvline(x=first_component, color=color, linestyle=':',
                      linewidth=1, alpha=0.5)
            ax.text(first_component, threshold - 0.02,
                   f'PC{int(first_component)}',
                   ha='center', fontsize=9, color=color)

    ax.set_xlabel('Number of Components', fontweight='bold', fontsize=12)
    ax.set_ylabel('Cumulative Variance Explained', fontweight='bold', fontsize=12)
    ax.set_title('Cumulative Variance Explained by Principal Components',
                 fontsize=14, fontweight='bold')
    ax.set_ylim([0, 1.05])
    ax.legend(loc='lower right', fontsize=10)
    ax.grid(alpha=0.3)

    # Limit x-axis ticks if too many components
    if len(df) > 20:
        tick_positions = range(1, len(df) + 1, max(1, len(df) // 20))
        ax.set_xticks(tick_positions)

    plt.tight_layout()
    output_file = output_dir / "cumulative_variance.png"
    plt.savefig(output_file, dpi=300, bbox_inches='tight')
    print(f"✓ Saved: {output_file}")
    plt.close()

def plot_variance_combined(pca_data, output_dir):
    """Plot scree and cumulative variance together"""
    if 'variance' not in pca_data:
        print("⚠ No variance data found")
        return

    df = pca_data['variance']

    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))

    # Left: Scree plot (top components only)
    top_n = min(20, len(df))
    df_top = df.head(top_n)

    colors = plt.cm.viridis(np.linspace(0.3, 0.9, len(df_top)))
    ax1.bar(df_top['component'], df_top['explained_variance'],
            color=colors, alpha=0.8, edgecolor='black', linewidth=0.5)
    ax1.set_xlabel('Principal Component', fontweight='bold')
    ax1.set_ylabel('Explained Variance Ratio', fontweight='bold')
    ax1.set_title(f'Scree Plot (Top {top_n} Components)', fontweight='bold')
    ax1.grid(axis='y', alpha=0.3)

    # Right: Cumulative variance
    ax2.plot(df['component'], df['cumulative_variance_pct'],
             'o-', color='#2ecc71', linewidth=2, markersize=6)
    ax2.fill_between(df['component'], 0, df['cumulative_variance_pct'],
                     alpha=0.3, color='#2ecc71')

    # Add threshold lines
    for threshold in [80, 90, 95, 99]:
        ax2.axhline(y=threshold, color='red', linestyle='--',
                   linewidth=1, alpha=0.5)
        ax2.text(df['component'].iloc[-1], threshold + 1,
                f'{threshold}%', fontsize=9, color='red')

    ax2.set_xlabel('Number of Components', fontweight='bold')
    ax2.set_ylabel('Cumulative Variance (%)', fontweight='bold')
    ax2.set_title('Cumulative Variance Explained', fontweight='bold')
    ax2.set_ylim([0, 105])
    ax2.grid(alpha=0.3)

    plt.tight_layout()
    output_file = output_dir / "variance_analysis.png"
    plt.savefig(output_file, dpi=300, bbox_inches='tight')
    print(f"✓ Saved: {output_file}")
    plt.close()

def plot_biplot(pca_data, output_dir):
    """Plot biplot showing data projected onto first 2 principal components"""
    if 'projections' not in pca_data:
        print("⚠ No projection data found")
        return

    df = pca_data['projections']

    fig, ax = plt.subplots(figsize=(10, 8))

    # Check if we have labels
    has_labels = 'label' in df.columns and df['label'].nunique() > 1

    if has_labels:
        # Color by label (delayed vs not delayed)
        for label in df['label'].unique():
            mask = df['label'] == label
            label_name = 'Delayed' if label == 1.0 else 'On Time'
            color = '#e74c3c' if label == 1.0 else '#3498db'

            ax.scatter(df[mask]['pc1'], df[mask]['pc2'],
                      alpha=0.6, s=20, c=color, label=label_name,
                      edgecolors='black', linewidth=0.3)
    else:
        # No labels, single color
        ax.scatter(df['pc1'], df['pc2'],
                  alpha=0.6, s=20, c='#3498db',
                  edgecolors='black', linewidth=0.3)

    # Add axes
    ax.axhline(y=0, color='k', linestyle='-', linewidth=0.5, alpha=0.5)
    ax.axvline(x=0, color='k', linestyle='-', linewidth=0.5, alpha=0.5)

    ax.set_xlabel('First Principal Component (PC1)', fontweight='bold', fontsize=12)
    ax.set_ylabel('Second Principal Component (PC2)', fontweight='bold', fontsize=12)
    ax.set_title('PCA Biplot - Projection onto First 2 Components',
                 fontsize=14, fontweight='bold')

    if has_labels:
        ax.legend(loc='best', fontsize=11)

    ax.grid(alpha=0.3)

    plt.tight_layout()
    output_file = output_dir / "biplot.png"
    plt.savefig(output_file, dpi=300, bbox_inches='tight')
    print(f"✓ Saved: {output_file}")
    plt.close()

def plot_biplot_with_loadings(pca_data, output_dir, top_features=20):
    """Plot biplot with loading vectors showing feature contributions"""
    if 'projections' not in pca_data or 'loadings' not in pca_data:
        print("⚠ No projection or loading data found")
        return

    df_proj = pca_data['projections']
    df_load = pca_data['loadings']

    # Check if we have PC1 and PC2 in loadings
    if 'PC1' not in df_load.columns or 'PC2' not in df_load.columns:
        print("⚠ PC1 or PC2 not found in loadings")
        return

    fig, ax = plt.subplots(figsize=(12, 10))

    # Plot data projections (semi-transparent)
    has_labels = 'label' in df_proj.columns and df_proj['label'].nunique() > 1

    if has_labels:
        for label in df_proj['label'].unique():
            mask = df_proj['label'] == label
            label_name = 'Delayed' if label == 1.0 else 'On Time'
            color = '#e74c3c' if label == 1.0 else '#3498db'

            ax.scatter(df_proj[mask]['pc1'], df_proj[mask]['pc2'],
                      alpha=0.3, s=15, c=color, label=label_name,
                      edgecolors='none')
    else:
        ax.scatter(df_proj['pc1'], df_proj['pc2'],
                  alpha=0.3, s=15, c='#95a5a6', edgecolors='none')

    # Calculate contribution of each feature (length of loading vector)
    df_load['contribution'] = np.sqrt(df_load['PC1']**2 + df_load['PC2']**2)

    # Select top contributing features
    top_load = df_load.nlargest(top_features, 'contribution')

    # Scale loadings for visualization (to match data scale)
    scale_factor = min(
        df_proj['pc1'].abs().max() / df_load['PC1'].abs().max(),
        df_proj['pc2'].abs().max() / df_load['PC2'].abs().max()
    ) * 0.8

    # Plot loading vectors (arrows)
    colors = plt.cm.viridis(np.linspace(0.3, 0.9, len(top_load)))

    for idx, (_, row) in enumerate(top_load.iterrows()):
        pc1_scaled = row['PC1'] * scale_factor
        pc2_scaled = row['PC2'] * scale_factor

        # Draw arrow
        ax.arrow(0, 0, pc1_scaled, pc2_scaled,
                head_width=0.05, head_length=0.05,
                fc=colors[idx], ec=colors[idx],
                alpha=0.8, linewidth=2, zorder=5)

        # Add feature label at the end of arrow
        if 'feature_name' in row and pd.notna(row['feature_name']):
            # Truncate long names
            feature_label = str(row['feature_name'])
            if len(feature_label) > 15:
                feature_label = feature_label[:12] + "..."
        else:
            feature_label = f"F{int(row['feature_index'])}"

        ax.text(pc1_scaled * 1.15, pc2_scaled * 1.15,
               feature_label,
               fontsize=8, ha='center', va='center',
               bbox=dict(boxstyle='round,pad=0.3', facecolor='white',
                        edgecolor=colors[idx], alpha=0.8),
               zorder=6)

    # Add axes
    ax.axhline(y=0, color='k', linestyle='-', linewidth=1, alpha=0.5)
    ax.axvline(x=0, color='k', linestyle='-', linewidth=1, alpha=0.5)

    # Add circle to show unit contributions
    circle = plt.Circle((0, 0), scale_factor, color='gray',
                       fill=False, linestyle='--', linewidth=1, alpha=0.3)
    ax.add_patch(circle)

    ax.set_xlabel('First Principal Component (PC1)', fontweight='bold', fontsize=12)
    ax.set_ylabel('Second Principal Component (PC2)', fontweight='bold', fontsize=12)
    ax.set_title(f'PCA Biplot with Loading Vectors (Top {top_features} Features)',
                 fontsize=14, fontweight='bold')

    if has_labels:
        ax.legend(loc='upper right', fontsize=10)

    ax.grid(alpha=0.3)
    ax.set_aspect('equal', adjustable='box')

    # Add interpretation text
    textstr = '\n'.join([
        'Loading Vectors Interpretation:',
        '• Arrow length = feature contribution',
        '• Arrow direction = feature effect on PCs',
        '• Parallel arrows = correlated features',
        '• Opposite arrows = negatively correlated'
    ])
    props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
    ax.text(0.02, 0.98, textstr, transform=ax.transAxes, fontsize=9,
            verticalalignment='top', bbox=props)

    plt.tight_layout()
    output_file = output_dir / "biplot_with_loadings.png"
    plt.savefig(output_file, dpi=300, bbox_inches='tight')
    print(f"✓ Saved: {output_file}")
    plt.close()

def plot_correlation_circle(pca_data, output_dir, top_features=30):
    """Plot correlation circle showing feature loadings on PC1 and PC2"""
    if 'loadings' not in pca_data:
        print("⚠ No loading data found")
        return

    df_load = pca_data['loadings']

    # Check if we have PC1 and PC2
    if 'PC1' not in df_load.columns or 'PC2' not in df_load.columns:
        print("⚠ PC1 or PC2 not found in loadings")
        return

    # Calculate contribution and select top features
    df_load['contribution'] = np.sqrt(df_load['PC1']**2 + df_load['PC2']**2)
    top_load = df_load.nlargest(top_features, 'contribution')

    fig, ax = plt.subplots(figsize=(10, 10))

    # Draw unit circle
    circle = plt.Circle((0, 0), 1, color='gray', fill=False,
                       linestyle='--', linewidth=2, alpha=0.5)
    ax.add_patch(circle)

    # Draw axes
    ax.axhline(y=0, color='k', linestyle='-', linewidth=1, alpha=0.5)
    ax.axvline(x=0, color='k', linestyle='-', linewidth=1, alpha=0.5)

    # Color by contribution
    colors = plt.cm.viridis(np.linspace(0.3, 0.9, len(top_load)))

    # Plot loading vectors
    for idx, (_, row) in enumerate(top_load.iterrows()):
        pc1 = row['PC1']
        pc2 = row['PC2']

        # Draw arrow
        ax.arrow(0, 0, pc1, pc2,
                head_width=0.03, head_length=0.03,
                fc=colors[idx], ec=colors[idx],
                alpha=0.8, linewidth=1.5, zorder=5)

        # Add feature label
        if 'feature_name' in row and pd.notna(row['feature_name']):
            # Truncate long names
            feature_label = str(row['feature_name'])
            if len(feature_label) > 12:
                feature_label = feature_label[:9] + "..."
        else:
            feature_label = f"F{int(row['feature_index'])}"

        label_offset = 1.08
        ax.text(pc1 * label_offset, pc2 * label_offset,
               feature_label,
               fontsize=7, ha='center', va='center',
               bbox=dict(boxstyle='round,pad=0.2', facecolor='white',
                        edgecolor=colors[idx], alpha=0.7),
               zorder=6)

    ax.set_xlim([-1.2, 1.2])
    ax.set_ylim([-1.2, 1.2])
    ax.set_xlabel('PC1 Loading', fontweight='bold', fontsize=12)
    ax.set_ylabel('PC2 Loading', fontweight='bold', fontsize=12)
    ax.set_title(f'Correlation Circle - Feature Loadings (Top {top_features})',
                 fontsize=14, fontweight='bold')
    ax.set_aspect('equal', adjustable='box')
    ax.grid(alpha=0.3)

    # Add interpretation text
    textstr = '\n'.join([
        'Interpretation:',
        '• Distance from center = contribution to PCs',
        '• Close to circle = well represented',
        '• Angle = correlation with PCs',
        '• Parallel arrows = correlated features',
        '• Perpendicular = uncorrelated',
        '• Opposite = negatively correlated'
    ])
    props = dict(boxstyle='round', facecolor='lightblue', alpha=0.5)
    ax.text(0.02, 0.98, textstr, transform=ax.transAxes, fontsize=8,
            verticalalignment='top', bbox=props)

    plt.tight_layout()
    output_file = output_dir / "correlation_circle.png"
    plt.savefig(output_file, dpi=300, bbox_inches='tight')
    print(f"✓ Saved: {output_file}")
    plt.close()

def plot_top_contributors(pca_data, output_dir, top_n=15):
    """Plot horizontal bar chart of top contributing features with full names"""
    if 'loadings' not in pca_data:
        print("⚠ No loading data found")
        return

    df_load = pca_data['loadings']

    # Check if we have PC1 and PC2
    if 'PC1' not in df_load.columns or 'PC2' not in df_load.columns:
        print("⚠ PC1 or PC2 not found in loadings")
        return

    # Calculate contribution
    df_load['contribution'] = np.sqrt(df_load['PC1']**2 + df_load['PC2']**2)
    top_load = df_load.nlargest(top_n, 'contribution').copy()

    # Get feature names
    if 'feature_name' in top_load.columns:
        top_load['display_name'] = top_load.apply(
            lambda row: str(row['feature_name']) if pd.notna(row['feature_name'])
                       else f"Feature {int(row['feature_index'])}",
            axis=1
        )
    else:
        top_load['display_name'] = top_load['feature_index'].apply(lambda x: f"Feature {int(x)}")

    # Sort by contribution
    top_load = top_load.sort_values('contribution', ascending=True)

    fig, ax = plt.subplots(figsize=(12, max(8, top_n * 0.4)))

    # Color by contribution strength
    colors = plt.cm.viridis(np.linspace(0.3, 0.9, len(top_load)))

    # Plot horizontal bars
    y_pos = np.arange(len(top_load))
    ax.barh(y_pos, top_load['contribution'], color=colors, alpha=0.8,
            edgecolor='black', linewidth=0.5)

    # Add feature names
    ax.set_yticks(y_pos)
    ax.set_yticklabels(top_load['display_name'], fontsize=9)

    # Add value labels on bars
    for i, (idx, row) in enumerate(top_load.iterrows()):
        ax.text(row['contribution'], i, f" {row['contribution']:.4f}",
               va='center', fontsize=8)

    ax.set_xlabel('Contribution to PC1 and PC2 (L2 norm)', fontweight='bold', fontsize=11)
    ax.set_title(f'Top {top_n} Contributing Features to First 2 Principal Components',
                 fontsize=13, fontweight='bold')
    ax.grid(axis='x', alpha=0.3)

    plt.tight_layout()
    output_file = output_dir / "top_contributors.png"
    plt.savefig(output_file, dpi=300, bbox_inches='tight')
    print(f"✓ Saved: {output_file}")
    plt.close()

def plot_variance_heatmap(pca_data, output_dir):
    """Plot heatmap of top components' variance"""
    if 'variance' not in pca_data:
        print("⚠ No variance data found")
        return

    df = pca_data['variance']
    top_n = min(20, len(df))
    df_top = df.head(top_n)

    # Reshape data for heatmap
    variance_matrix = df_top['explained_variance'].values.reshape(-1, 1)

    fig, ax = plt.subplots(figsize=(8, 10))

    sns.heatmap(variance_matrix,
                annot=True, fmt='.4f',
                cmap='YlOrRd',
                yticklabels=[f'PC{i}' for i in df_top['component']],
                xticklabels=['Variance'],
                cbar_kws={'label': 'Explained Variance Ratio'},
                ax=ax)

    ax.set_title(f'Variance Explained by Top {top_n} Components',
                 fontsize=14, fontweight='bold')

    plt.tight_layout()
    output_file = output_dir / "variance_heatmap.png"
    plt.savefig(output_file, dpi=300, bbox_inches='tight')
    print(f"✓ Saved: {output_file}")
    plt.close()

def generate_pca_report(pca_data, output_dir):
    """Generate text summary report for PCA"""
    if 'variance' not in pca_data:
        return

    df = pca_data['variance']

    report = []
    report.append("=" * 80)
    report.append("PCA VARIANCE ANALYSIS REPORT")
    report.append("=" * 80)
    report.append("")

    # Summary statistics
    total_components = len(df)
    total_variance = df['cumulative_variance'].iloc[-1]

    report.append(f"Total Components: {total_components}")
    report.append(f"Total Variance Explained: {total_variance * 100:.2f}%")
    report.append("")

    # Components needed for different thresholds
    report.append("Components Needed for Variance Thresholds:")
    report.append("-" * 40)
    for threshold in [0.80, 0.90, 0.95, 0.99]:
        components_needed = df[df['cumulative_variance'] >= threshold]
        if not components_needed.empty:
            k = components_needed.iloc[0]['component']
            actual_var = components_needed.iloc[0]['cumulative_variance']
            report.append(f"{int(threshold * 100):3d}% variance: {int(k):4d} components ({actual_var * 100:.2f}%)")
    report.append("")

    # Top components
    report.append("Top 10 Components by Explained Variance:")
    report.append("-" * 40)
    report.append(f"{'Component':>10s} {'Individual':>12s} {'Cumulative':>12s}")
    report.append("-" * 40)
    for _, row in df.head(10).iterrows():
        report.append(f"PC-{int(row['component']):>6d} {row['explained_variance']:>12.6f} {row['cumulative_variance']:>12.6f}")
    report.append("")

    # Projection statistics
    if 'projections' in pca_data:
        proj_df = pca_data['projections']
        report.append("Projection Statistics:")
        report.append("-" * 40)
        report.append(f"Number of samples: {len(proj_df)}")
        report.append(f"PC1 range: [{proj_df['pc1'].min():.4f}, {proj_df['pc1'].max():.4f}]")
        report.append(f"PC2 range: [{proj_df['pc2'].min():.4f}, {proj_df['pc2'].max():.4f}]")

        if 'label' in proj_df.columns:
            report.append(f"\nClass distribution:")
            for label in sorted(proj_df['label'].unique()):
                count = (proj_df['label'] == label).sum()
                pct = count / len(proj_df) * 100
                label_name = 'Delayed' if label == 1.0 else 'On Time'
                report.append(f"  {label_name}: {count} ({pct:.1f}%)")
        report.append("")

    # Loading statistics
    if 'loadings' in pca_data:
        load_df = pca_data['loadings']
        report.append("Feature Loading Statistics:")
        report.append("-" * 40)
        report.append(f"Number of features: {len(load_df)}")

        if 'PC1' in load_df.columns and 'PC2' in load_df.columns:
            # Calculate contributions
            load_df['contribution'] = np.sqrt(load_df['PC1']**2 + load_df['PC2']**2)
            top_contributors = load_df.nlargest(10, 'contribution')

            report.append(f"\nTop 10 Contributing Features (to PC1+PC2):")
            report.append("-" * 80)
            if 'feature_name' in top_contributors.columns:
                report.append(f"{'Index':>6s} {'Feature Name':<35s} {'PC1':>12s} {'PC2':>12s} {'Total':>12s}")
                report.append("-" * 80)
                for _, row in top_contributors.iterrows():
                    fname = str(row['feature_name'])[:35] if pd.notna(row['feature_name']) else f"feature_{int(row['feature_index'])}"
                    report.append(f"{int(row['feature_index']):>6d} {fname:<35s} "
                                f"{row['PC1']:>12.6f} "
                                f"{row['PC2']:>12.6f} "
                                f"{row['contribution']:>12.6f}")
            else:
                report.append(f"{'Feature':>10s} {'PC1':>12s} {'PC2':>12s} {'Total':>12s}")
                report.append("-" * 80)
                for _, row in top_contributors.iterrows():
                    report.append(f"F{int(row['feature_index']):>9d} "
                                f"{row['PC1']:>12.6f} "
                                f"{row['PC2']:>12.6f} "
                                f"{row['contribution']:>12.6f}")
        report.append("")

    report.append("=" * 80)

    # Write to file
    output_file = output_dir / "pca_report.txt"
    with open(output_file, 'w') as f:
        f.write('\n'.join(report))

    print(f"✓ Saved: {output_file}")

    # Also print to console
    print("\n" + '\n'.join(report))

def main():
    if len(sys.argv) < 2:
        print("Usage: python visualize_pca.py <pca_data_directory>")
        print("Example: python visualize_pca.py /output/metrics/pca_analysis")
        sys.exit(1)

    data_dir = Path(sys.argv[1])

    if not data_dir.exists():
        print(f"✗ Error: Directory not found: {data_dir}")
        sys.exit(1)

    print("=" * 80)
    print("PCA Analysis - Visualization")
    print("=" * 80)
    print(f"\nData directory: {data_dir}\n")

    # Load PCA data
    print("Loading PCA data...")
    pca_data = load_pca_data(data_dir)

    if not pca_data:
        print("✗ No PCA data files found!")
        sys.exit(1)

    print(f"\n✓ Loaded {len(pca_data)} data files\n")

    # Create output directory for plots
    output_dir = data_dir / "plots-pca"
    output_dir.mkdir(parents=True, exist_ok=True)
    print(f"Saving plots to: {output_dir}\n")

    # Generate visualizations
    print("Generating visualizations...")
    plot_scree_plot(pca_data, output_dir)
    plot_cumulative_variance(pca_data, output_dir)
    plot_variance_combined(pca_data, output_dir)
    plot_biplot(pca_data, output_dir)
    plot_biplot_with_loadings(pca_data, output_dir, top_features=20)
    plot_correlation_circle(pca_data, output_dir, top_features=30)
    plot_top_contributors(pca_data, output_dir, top_n=15)
    plot_variance_heatmap(pca_data, output_dir)

    # Generate report
    print("\nGenerating PCA report...")
    generate_pca_report(pca_data, output_dir)

    print("\n" + "=" * 80)
    print("✓ PCA Visualization complete!")
    print("=" * 80)

if __name__ == "__main__":
    main()
